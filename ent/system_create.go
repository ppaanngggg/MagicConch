// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ppaanngggg/MagicConch/ent/system"
)

// SystemCreate is the builder for creating a System entity.
type SystemCreate struct {
	config
	mutation *SystemMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (sc *SystemCreate) SetCreateTime(t time.Time) *SystemCreate {
	sc.mutation.SetCreateTime(t)
	return sc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (sc *SystemCreate) SetNillableCreateTime(t *time.Time) *SystemCreate {
	if t != nil {
		sc.SetCreateTime(*t)
	}
	return sc
}

// SetUpdateTime sets the "update_time" field.
func (sc *SystemCreate) SetUpdateTime(t time.Time) *SystemCreate {
	sc.mutation.SetUpdateTime(t)
	return sc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (sc *SystemCreate) SetNillableUpdateTime(t *time.Time) *SystemCreate {
	if t != nil {
		sc.SetUpdateTime(*t)
	}
	return sc
}

// SetSystem sets the "system" field.
func (sc *SystemCreate) SetSystem(s string) *SystemCreate {
	sc.mutation.SetSystem(s)
	return sc
}

// SetClickTime sets the "click_time" field.
func (sc *SystemCreate) SetClickTime(t time.Time) *SystemCreate {
	sc.mutation.SetClickTime(t)
	return sc
}

// SetNillableClickTime sets the "click_time" field if the given value is not nil.
func (sc *SystemCreate) SetNillableClickTime(t *time.Time) *SystemCreate {
	if t != nil {
		sc.SetClickTime(*t)
	}
	return sc
}

// Mutation returns the SystemMutation object of the builder.
func (sc *SystemCreate) Mutation() *SystemMutation {
	return sc.mutation
}

// Save creates the System in the database.
func (sc *SystemCreate) Save(ctx context.Context) (*System, error) {
	sc.defaults()
	return withHooks[*System, SystemMutation](ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SystemCreate) SaveX(ctx context.Context) *System {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SystemCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SystemCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SystemCreate) defaults() {
	if _, ok := sc.mutation.CreateTime(); !ok {
		v := system.DefaultCreateTime()
		sc.mutation.SetCreateTime(v)
	}
	if _, ok := sc.mutation.UpdateTime(); !ok {
		v := system.DefaultUpdateTime()
		sc.mutation.SetUpdateTime(v)
	}
	if _, ok := sc.mutation.ClickTime(); !ok {
		v := system.DefaultClickTime()
		sc.mutation.SetClickTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SystemCreate) check() error {
	if _, ok := sc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "System.create_time"`)}
	}
	if _, ok := sc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "System.update_time"`)}
	}
	if _, ok := sc.mutation.System(); !ok {
		return &ValidationError{Name: "system", err: errors.New(`ent: missing required field "System.system"`)}
	}
	if _, ok := sc.mutation.ClickTime(); !ok {
		return &ValidationError{Name: "click_time", err: errors.New(`ent: missing required field "System.click_time"`)}
	}
	return nil
}

func (sc *SystemCreate) sqlSave(ctx context.Context) (*System, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SystemCreate) createSpec() (*System, *sqlgraph.CreateSpec) {
	var (
		_node = &System{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(system.Table, sqlgraph.NewFieldSpec(system.FieldID, field.TypeInt))
	)
	_spec.OnConflict = sc.conflict
	if value, ok := sc.mutation.CreateTime(); ok {
		_spec.SetField(system.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := sc.mutation.UpdateTime(); ok {
		_spec.SetField(system.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := sc.mutation.System(); ok {
		_spec.SetField(system.FieldSystem, field.TypeString, value)
		_node.System = value
	}
	if value, ok := sc.mutation.ClickTime(); ok {
		_spec.SetField(system.FieldClickTime, field.TypeTime, value)
		_node.ClickTime = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.System.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SystemUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (sc *SystemCreate) OnConflict(opts ...sql.ConflictOption) *SystemUpsertOne {
	sc.conflict = opts
	return &SystemUpsertOne{
		create: sc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.System.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sc *SystemCreate) OnConflictColumns(columns ...string) *SystemUpsertOne {
	sc.conflict = append(sc.conflict, sql.ConflictColumns(columns...))
	return &SystemUpsertOne{
		create: sc,
	}
}

type (
	// SystemUpsertOne is the builder for "upsert"-ing
	//  one System node.
	SystemUpsertOne struct {
		create *SystemCreate
	}

	// SystemUpsert is the "OnConflict" setter.
	SystemUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *SystemUpsert) SetUpdateTime(v time.Time) *SystemUpsert {
	u.Set(system.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *SystemUpsert) UpdateUpdateTime() *SystemUpsert {
	u.SetExcluded(system.FieldUpdateTime)
	return u
}

// SetSystem sets the "system" field.
func (u *SystemUpsert) SetSystem(v string) *SystemUpsert {
	u.Set(system.FieldSystem, v)
	return u
}

// UpdateSystem sets the "system" field to the value that was provided on create.
func (u *SystemUpsert) UpdateSystem() *SystemUpsert {
	u.SetExcluded(system.FieldSystem)
	return u
}

// SetClickTime sets the "click_time" field.
func (u *SystemUpsert) SetClickTime(v time.Time) *SystemUpsert {
	u.Set(system.FieldClickTime, v)
	return u
}

// UpdateClickTime sets the "click_time" field to the value that was provided on create.
func (u *SystemUpsert) UpdateClickTime() *SystemUpsert {
	u.SetExcluded(system.FieldClickTime)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.System.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *SystemUpsertOne) UpdateNewValues() *SystemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(system.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.System.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SystemUpsertOne) Ignore() *SystemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SystemUpsertOne) DoNothing() *SystemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SystemCreate.OnConflict
// documentation for more info.
func (u *SystemUpsertOne) Update(set func(*SystemUpsert)) *SystemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SystemUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *SystemUpsertOne) SetUpdateTime(v time.Time) *SystemUpsertOne {
	return u.Update(func(s *SystemUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *SystemUpsertOne) UpdateUpdateTime() *SystemUpsertOne {
	return u.Update(func(s *SystemUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetSystem sets the "system" field.
func (u *SystemUpsertOne) SetSystem(v string) *SystemUpsertOne {
	return u.Update(func(s *SystemUpsert) {
		s.SetSystem(v)
	})
}

// UpdateSystem sets the "system" field to the value that was provided on create.
func (u *SystemUpsertOne) UpdateSystem() *SystemUpsertOne {
	return u.Update(func(s *SystemUpsert) {
		s.UpdateSystem()
	})
}

// SetClickTime sets the "click_time" field.
func (u *SystemUpsertOne) SetClickTime(v time.Time) *SystemUpsertOne {
	return u.Update(func(s *SystemUpsert) {
		s.SetClickTime(v)
	})
}

// UpdateClickTime sets the "click_time" field to the value that was provided on create.
func (u *SystemUpsertOne) UpdateClickTime() *SystemUpsertOne {
	return u.Update(func(s *SystemUpsert) {
		s.UpdateClickTime()
	})
}

// Exec executes the query.
func (u *SystemUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SystemCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SystemUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SystemUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SystemUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SystemCreateBulk is the builder for creating many System entities in bulk.
type SystemCreateBulk struct {
	config
	builders []*SystemCreate
	conflict []sql.ConflictOption
}

// Save creates the System entities in the database.
func (scb *SystemCreateBulk) Save(ctx context.Context) ([]*System, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*System, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SystemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = scb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SystemCreateBulk) SaveX(ctx context.Context) []*System {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SystemCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SystemCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.System.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SystemUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (scb *SystemCreateBulk) OnConflict(opts ...sql.ConflictOption) *SystemUpsertBulk {
	scb.conflict = opts
	return &SystemUpsertBulk{
		create: scb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.System.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (scb *SystemCreateBulk) OnConflictColumns(columns ...string) *SystemUpsertBulk {
	scb.conflict = append(scb.conflict, sql.ConflictColumns(columns...))
	return &SystemUpsertBulk{
		create: scb,
	}
}

// SystemUpsertBulk is the builder for "upsert"-ing
// a bulk of System nodes.
type SystemUpsertBulk struct {
	create *SystemCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.System.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *SystemUpsertBulk) UpdateNewValues() *SystemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(system.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.System.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SystemUpsertBulk) Ignore() *SystemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SystemUpsertBulk) DoNothing() *SystemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SystemCreateBulk.OnConflict
// documentation for more info.
func (u *SystemUpsertBulk) Update(set func(*SystemUpsert)) *SystemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SystemUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *SystemUpsertBulk) SetUpdateTime(v time.Time) *SystemUpsertBulk {
	return u.Update(func(s *SystemUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *SystemUpsertBulk) UpdateUpdateTime() *SystemUpsertBulk {
	return u.Update(func(s *SystemUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetSystem sets the "system" field.
func (u *SystemUpsertBulk) SetSystem(v string) *SystemUpsertBulk {
	return u.Update(func(s *SystemUpsert) {
		s.SetSystem(v)
	})
}

// UpdateSystem sets the "system" field to the value that was provided on create.
func (u *SystemUpsertBulk) UpdateSystem() *SystemUpsertBulk {
	return u.Update(func(s *SystemUpsert) {
		s.UpdateSystem()
	})
}

// SetClickTime sets the "click_time" field.
func (u *SystemUpsertBulk) SetClickTime(v time.Time) *SystemUpsertBulk {
	return u.Update(func(s *SystemUpsert) {
		s.SetClickTime(v)
	})
}

// UpdateClickTime sets the "click_time" field to the value that was provided on create.
func (u *SystemUpsertBulk) UpdateClickTime() *SystemUpsertBulk {
	return u.Update(func(s *SystemUpsert) {
		s.UpdateClickTime()
	})
}

// Exec executes the query.
func (u *SystemUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SystemCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SystemCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SystemUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
