// Code generated by ent, DO NOT EDIT.

package system

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/ppaanngggg/MagicConch/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.System {
	return predicate.System(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.System {
	return predicate.System(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.System {
	return predicate.System(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.System {
	return predicate.System(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.System {
	return predicate.System(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.System {
	return predicate.System(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.System {
	return predicate.System(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.System {
	return predicate.System(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.System {
	return predicate.System(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.System {
	return predicate.System(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.System {
	return predicate.System(sql.FieldEQ(FieldUpdateTime, v))
}

// System applies equality check predicate on the "system" field. It's identical to SystemEQ.
func System(v string) predicate.System {
	return predicate.System(sql.FieldEQ(FieldSystem, v))
}

// ClickTime applies equality check predicate on the "click_time" field. It's identical to ClickTimeEQ.
func ClickTime(v time.Time) predicate.System {
	return predicate.System(sql.FieldEQ(FieldClickTime, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.System {
	return predicate.System(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.System {
	return predicate.System(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.System {
	return predicate.System(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.System {
	return predicate.System(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.System {
	return predicate.System(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.System {
	return predicate.System(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.System {
	return predicate.System(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.System {
	return predicate.System(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.System {
	return predicate.System(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.System {
	return predicate.System(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.System {
	return predicate.System(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.System {
	return predicate.System(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.System {
	return predicate.System(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.System {
	return predicate.System(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.System {
	return predicate.System(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.System {
	return predicate.System(sql.FieldLTE(FieldUpdateTime, v))
}

// SystemEQ applies the EQ predicate on the "system" field.
func SystemEQ(v string) predicate.System {
	return predicate.System(sql.FieldEQ(FieldSystem, v))
}

// SystemNEQ applies the NEQ predicate on the "system" field.
func SystemNEQ(v string) predicate.System {
	return predicate.System(sql.FieldNEQ(FieldSystem, v))
}

// SystemIn applies the In predicate on the "system" field.
func SystemIn(vs ...string) predicate.System {
	return predicate.System(sql.FieldIn(FieldSystem, vs...))
}

// SystemNotIn applies the NotIn predicate on the "system" field.
func SystemNotIn(vs ...string) predicate.System {
	return predicate.System(sql.FieldNotIn(FieldSystem, vs...))
}

// SystemGT applies the GT predicate on the "system" field.
func SystemGT(v string) predicate.System {
	return predicate.System(sql.FieldGT(FieldSystem, v))
}

// SystemGTE applies the GTE predicate on the "system" field.
func SystemGTE(v string) predicate.System {
	return predicate.System(sql.FieldGTE(FieldSystem, v))
}

// SystemLT applies the LT predicate on the "system" field.
func SystemLT(v string) predicate.System {
	return predicate.System(sql.FieldLT(FieldSystem, v))
}

// SystemLTE applies the LTE predicate on the "system" field.
func SystemLTE(v string) predicate.System {
	return predicate.System(sql.FieldLTE(FieldSystem, v))
}

// SystemContains applies the Contains predicate on the "system" field.
func SystemContains(v string) predicate.System {
	return predicate.System(sql.FieldContains(FieldSystem, v))
}

// SystemHasPrefix applies the HasPrefix predicate on the "system" field.
func SystemHasPrefix(v string) predicate.System {
	return predicate.System(sql.FieldHasPrefix(FieldSystem, v))
}

// SystemHasSuffix applies the HasSuffix predicate on the "system" field.
func SystemHasSuffix(v string) predicate.System {
	return predicate.System(sql.FieldHasSuffix(FieldSystem, v))
}

// SystemEqualFold applies the EqualFold predicate on the "system" field.
func SystemEqualFold(v string) predicate.System {
	return predicate.System(sql.FieldEqualFold(FieldSystem, v))
}

// SystemContainsFold applies the ContainsFold predicate on the "system" field.
func SystemContainsFold(v string) predicate.System {
	return predicate.System(sql.FieldContainsFold(FieldSystem, v))
}

// ClickTimeEQ applies the EQ predicate on the "click_time" field.
func ClickTimeEQ(v time.Time) predicate.System {
	return predicate.System(sql.FieldEQ(FieldClickTime, v))
}

// ClickTimeNEQ applies the NEQ predicate on the "click_time" field.
func ClickTimeNEQ(v time.Time) predicate.System {
	return predicate.System(sql.FieldNEQ(FieldClickTime, v))
}

// ClickTimeIn applies the In predicate on the "click_time" field.
func ClickTimeIn(vs ...time.Time) predicate.System {
	return predicate.System(sql.FieldIn(FieldClickTime, vs...))
}

// ClickTimeNotIn applies the NotIn predicate on the "click_time" field.
func ClickTimeNotIn(vs ...time.Time) predicate.System {
	return predicate.System(sql.FieldNotIn(FieldClickTime, vs...))
}

// ClickTimeGT applies the GT predicate on the "click_time" field.
func ClickTimeGT(v time.Time) predicate.System {
	return predicate.System(sql.FieldGT(FieldClickTime, v))
}

// ClickTimeGTE applies the GTE predicate on the "click_time" field.
func ClickTimeGTE(v time.Time) predicate.System {
	return predicate.System(sql.FieldGTE(FieldClickTime, v))
}

// ClickTimeLT applies the LT predicate on the "click_time" field.
func ClickTimeLT(v time.Time) predicate.System {
	return predicate.System(sql.FieldLT(FieldClickTime, v))
}

// ClickTimeLTE applies the LTE predicate on the "click_time" field.
func ClickTimeLTE(v time.Time) predicate.System {
	return predicate.System(sql.FieldLTE(FieldClickTime, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.System) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.System) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.System) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		p(s.Not())
	})
}
